//
// UserAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Networking
import Combine

class UserAPIRepositoryFake: UserAPIRepository { 

    var createUserError: Error? = nil
    var createUserResponse: Networking.Empty = .fake()

    func createUser(body: User) -> Future<Networking.Empty, Error> {
        return Future<Networking.Empty, Error> { promise in 
            if let error = self.createUserError { 
                promise(.failure(error))
            } else {
                promise(.success(self.createUserResponse))
            }
        }
    }

    var createUsersWithArrayInputError: Error? = nil
    var createUsersWithArrayInputResponse: Networking.Empty = .fake()

    func createUsersWithArrayInput(body: [User]) -> Future<Networking.Empty, Error> {
        return Future<Networking.Empty, Error> { promise in 
            if let error = self.createUsersWithArrayInputError { 
                promise(.failure(error))
            } else {
                promise(.success(self.createUsersWithArrayInputResponse))
            }
        }
    }

    var createUsersWithListInputError: Error? = nil
    var createUsersWithListInputResponse: Networking.Empty = .fake()

    func createUsersWithListInput(body: [User]) -> Future<Networking.Empty, Error> {
        return Future<Networking.Empty, Error> { promise in 
            if let error = self.createUsersWithListInputError { 
                promise(.failure(error))
            } else {
                promise(.success(self.createUsersWithListInputResponse))
            }
        }
    }

    var deleteUserError: Error? = nil
    var deleteUserResponse: Networking.Empty = .fake()

    func deleteUser(username: String) -> Future<Networking.Empty, Error> {
        return Future<Networking.Empty, Error> { promise in 
            if let error = self.deleteUserError { 
                promise(.failure(error))
            } else {
                promise(.success(self.deleteUserResponse))
            }
        }
    }

    var getUserByNameError: Error? = nil
    var getUserByNameResponse: User = .fake()

    func getUserByName(username: String) -> Future<User, Error> {
        return Future<User, Error> { promise in 
            if let error = self.getUserByNameError { 
                promise(.failure(error))
            } else {
                promise(.success(self.getUserByNameResponse))
            }
        }
    }

    var loginUserError: Error? = nil
    var loginUserResponse: String = .fake()

    func loginUser(username: String, password: String) -> Future<String, Error> {
        return Future<String, Error> { promise in 
            if let error = self.loginUserError { 
                promise(.failure(error))
            } else {
                promise(.success(self.loginUserResponse))
            }
        }
    }

    var logoutUserError: Error? = nil
    var logoutUserResponse: Networking.Empty = .fake()

    func logoutUser() -> Future<Networking.Empty, Error> {
        return Future<Networking.Empty, Error> { promise in 
            if let error = self.logoutUserError { 
                promise(.failure(error))
            } else {
                promise(.success(self.logoutUserResponse))
            }
        }
    }

    var updateUserError: Error? = nil
    var updateUserResponse: Networking.Empty = .fake()

    func updateUser(body: User, username: String) -> Future<Networking.Empty, Error> {
        return Future<Networking.Empty, Error> { promise in 
            if let error = self.updateUserError { 
                promise(.failure(error))
            } else {
                promise(.success(self.updateUserResponse))
            }
        }
    }
}


protocol UserAPIRepository { 
    func createUser(body: User) -> Future<Networking.Empty, Error>
    func createUsersWithArrayInput(body: [User]) -> Future<Networking.Empty, Error>
    func createUsersWithListInput(body: [User]) -> Future<Networking.Empty, Error>
    func deleteUser(username: String) -> Future<Networking.Empty, Error>
    func getUserByName(username: String) -> Future<User, Error>
    func loginUser(username: String, password: String) -> Future<String, Error>
    func logoutUser() -> Future<Networking.Empty, Error>
    func updateUser(body: User, username: String) -> Future<Networking.Empty, Error>
}

extension Repository: UserAPIRepository {
    func createUser(body: User) -> Future<Networking.Empty, Error> {
        let resource = UserAPI.createUserResource(body: body) 
        return webservice.future(for: resource)
    }
    
    func createUsersWithArrayInput(body: [User]) -> Future<Networking.Empty, Error> {
        let resource = UserAPI.createUsersWithArrayInputResource(body: body) 
        return webservice.future(for: resource)
    }
    
    func createUsersWithListInput(body: [User]) -> Future<Networking.Empty, Error> {
        let resource = UserAPI.createUsersWithListInputResource(body: body) 
        return webservice.future(for: resource)
    }
    
    func deleteUser(username: String) -> Future<Networking.Empty, Error> {
        let resource = UserAPI.deleteUserResource(username: username) 
        return webservice.future(for: resource)
    }
    
    func getUserByName(username: String) -> Future<User, Error> {
        let resource = UserAPI.getUserByNameResource(username: username) 
        return webservice.future(for: resource)
    }
    
    func loginUser(username: String, password: String) -> Future<String, Error> {
        let resource = UserAPI.loginUserResource(username: username,password: password) 
        return webservice.future(for: resource)
    }
    
    func logoutUser() -> Future<Networking.Empty, Error> {
        let resource = UserAPI.logoutUserResource() 
        return webservice.future(for: resource)
    }
    
    func updateUser(body: User, username: String) -> Future<Networking.Empty, Error> {
        let resource = UserAPI.updateUserResource(body: body,username: username) 
        return webservice.future(for: resource)
    }
    
}


open class UserAPI {

    /**
     Create user
     - POST /user
     - This can only be done by the logged in user.
     - parameter body: (body) Created user object 

     - returns: Resource<User,Networking.Empty> 
     */
    open class func createUserResource(body: User) -> Resource<User,Networking.Empty> {
        let path = "/user"
        
        return Resource(endpoint: path, 
                queryParameters: [],
                method: HTTP.Method(string: "POST"), 
                body: HTTP.Body(data: body, contentType: JSONContentType()),
                decoder: JSONDecoder()) 
          
    }


    /**
     Creates list of users with given input array
     - POST /user/createWithArray
     - parameter body: (body) List of user object 

     - returns: Resource<[User],Networking.Empty> 
     */
    open class func createUsersWithArrayInputResource(body: [User]) -> Resource<[User],Networking.Empty> {
        let path = "/user/createWithArray"
        
        return Resource(endpoint: path, 
                queryParameters: [],
                method: HTTP.Method(string: "POST"), 
                body: HTTP.Body(data: body, contentType: JSONContentType()),
                decoder: JSONDecoder()) 
          
    }


    /**
     Creates list of users with given input array
     - POST /user/createWithList
     - parameter body: (body) List of user object 

     - returns: Resource<[User],Networking.Empty> 
     */
    open class func createUsersWithListInputResource(body: [User]) -> Resource<[User],Networking.Empty> {
        let path = "/user/createWithList"
        
        return Resource(endpoint: path, 
                queryParameters: [],
                method: HTTP.Method(string: "POST"), 
                body: HTTP.Body(data: body, contentType: JSONContentType()),
                decoder: JSONDecoder()) 
          
    }


    /**
     Delete user
     - DELETE /user/{username}
     - This can only be done by the logged in user.
     - parameter username: (path) The name that needs to be deleted 

     - returns: Resource<Networking.Empty,Networking.Empty> 
     */
    open class func deleteUserResource(username: String) -> Resource<Networking.Empty,Networking.Empty> {
        var path = "/user/{username}"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        
        return Resource(endpoint: path, 
                queryParameters: [],
                method: HTTP.Method(string: "DELETE"), 
                body: nil,
                decoder: JSONDecoder()) 
          
    }


    /**
     Get user by user name
     - GET /user/{username}
     - examples: [{contentType=application/json, example={
  "firstName" : "firstName",
  "lastName" : "lastName",
  "password" : "password",
  "userStatus" : 6,
  "phone" : "phone",
  "id" : 0,
  "email" : "email",
  "username" : "username"
}}]
     - parameter username: (path) The name that needs to be fetched. Use user1 for testing. 

     - returns: Resource<Networking.Empty,User> 
     */
    open class func getUserByNameResource(username: String) -> Resource<Networking.Empty,User> {
        var path = "/user/{username}"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        
        return Resource(endpoint: path, 
                queryParameters: [],
                method: HTTP.Method(string: "GET"), 
                body: nil,
                decoder: JSONDecoder()) 
          
    }


    /**
     Logs user into the system
     - GET /user/login
     - responseHeaders: [X-Rate-Limit(Int), X-Expires-After(Date)]
     - responseHeaders: [X-Rate-Limit(Int), X-Expires-After(Date)]
     - examples: [{contentType=application/json, example=""}]
     - parameter username: (query) The user name for login      - parameter password: (query) The password for login in clear text 

     - returns: Resource<Networking.Empty,String> 
     */
    open class func loginUserResource(username: String, password: String) -> Resource<Networking.Empty,String> {
        let path = "/user/login"
        
        return Resource(endpoint: path, 
                queryParameters: 
        APIHelper.mapValuesToQueryItems([
                        "username": username, 
                        "password": password
        ]),
                method: HTTP.Method(string: "GET"), 
                body: nil,
                decoder: JSONDecoder()) 
          
    }


    /**
     Logs out current logged in user session
     - GET /user/logout

     - returns: Resource<Networking.Empty,Networking.Empty> 
     */
    open class func logoutUserResource() -> Resource<Networking.Empty,Networking.Empty> {
        let path = "/user/logout"
        
        return Resource(endpoint: path, 
                queryParameters: [],
                method: HTTP.Method(string: "GET"), 
                body: nil,
                decoder: JSONDecoder()) 
          
    }


    /**
     Updated user
     - PUT /user/{username}
     - This can only be done by the logged in user.
     - parameter body: (body) Updated user object      - parameter username: (path) name that need to be deleted 

     - returns: Resource<User,Networking.Empty> 
     */
    open class func updateUserResource(body: User, username: String) -> Resource<User,Networking.Empty> {
        var path = "/user/{username}"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        
        return Resource(endpoint: path, 
                queryParameters: [],
                method: HTTP.Method(string: "PUT"), 
                body: HTTP.Body(data: body, contentType: JSONContentType()),
                decoder: JSONDecoder()) 
          
    }

}
