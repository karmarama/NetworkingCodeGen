{{#operations}}//
// {{classname}}.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Networking
import Combine

class {{classname}}RepositoryFake: {{classname}}Repository { 
{{#operation}}

    var {{operationId}}Error: Error?
    var {{operationId}}Response: {{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}Networking.Empty{{/returnType}} = .fake()

    func {{operationId}}({{#allParams}}{{paramName}}: {{#isEnum}}{{#isContainer}}{{{dataType}}}{{/isContainer}}{{^isContainer}}{{{datatypeWithEnum}}}_{{operationId}}{{/isContainer}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}{{^required}}?{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) -> Future<{{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}Networking.Empty{{/returnType}}, Error> {
        return Future<{{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}Networking.Empty{{/returnType}}, Error> { promise in 
            if let error = self.{{operationId}}Error { 
                promise(.failure(error))
            } else {
                promise(.success(self.{{operationId}}Response))
            }
        }
    }
{{/operation}}
}


protocol {{classname}}Repository { 
{{#operation}}
    func {{operationId}}({{#allParams}}{{paramName}}: {{#isEnum}}{{#isContainer}}{{{dataType}}}{{/isContainer}}{{^isContainer}}{{{datatypeWithEnum}}}_{{operationId}}{{/isContainer}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}{{^required}}?{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) -> Future<{{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}Networking.Empty{{/returnType}}, Error>
{{/operation}}
}

extension Repository: {{classname}}Repository {
{{#operation}}
    func {{operationId}}({{#allParams}}{{paramName}}: {{#isEnum}}{{#isContainer}}{{{dataType}}}{{/isContainer}}{{^isContainer}}{{{datatypeWithEnum}}}_{{operationId}}{{/isContainer}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}{{^required}}? = nil{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) -> Future<{{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}Networking.Empty{{/returnType}}, Error> {
        let resource = {{classname}}.{{operationId}}Resource({{#allParams}}{{paramName}}: {{paramName}}{{#hasMore}},{{/hasMore}}{{/allParams}}) 
        return webservice.future(for: resource)
    }
    
{{/operation}} 
}

{{#description}}
/** {{description}} */{{/description}}
open class {{classname}} {
{{#operation}}
    {{#allParams}}
    {{#isEnum}}
    /**
     * enum for parameter {{paramName}}
     */
    public enum {{enumName}}_{{operationId}}: {{^isContainer}}{{{dataType}}}{{/isContainer}}{{#isContainer}}String{{/isContainer}} { {{#allowableValues}}{{#enumVars}}
        case {{name}} = {{#isContainer}}"{{/isContainer}}{{#isString}}"{{/isString}}{{{value}}}{{#isString}}"{{/isString}}{{#isContainer}}"{{/isContainer}}{{/enumVars}}{{/allowableValues}}
    }

    {{/isEnum}}
    {{/allParams}}

    /**
     {{#summary}}
     {{{summary}}}
     {{/summary}}
     - {{httpMethod}} {{{path}}}{{#notes}}
     - {{{notes}}}{{/notes}}{{#subresourceOperation}}
     - subresourceOperation: {{subresourceOperation}}{{/subresourceOperation}}{{#defaultResponse}}
     - defaultResponse: {{defaultResponse}}{{/defaultResponse}}{{#authMethods}}
     - {{#isBasic}}BASIC{{/isBasic}}{{#isOAuth}}OAuth{{/isOAuth}}{{#isApiKey}}API Key{{/isApiKey}}:
       - type: {{type}}{{#keyParamName}} {{keyParamName}} {{#isKeyInQuery}}(QUERY){{/isKeyInQuery}}{{#isKeyInHeaer}}(HEADER){{/isKeyInHeaer}}{{/keyParamName}}
       - name: {{name}}{{/authMethods}}{{#responseHeaders}}
     - responseHeaders: {{responseHeaders}}{{/responseHeaders}}{{#examples}}
     - examples: {{{examples}}}{{/examples}}{{#externalDocs}}
     - externalDocs: {{externalDocs}}{{/externalDocs}}{{#hasParams}}
     {{/hasParams}}{{#allParams}}
     - parameter {{paramName}}: ({{#isFormParam}}form{{/isFormParam}}{{#isQueryParam}}query{{/isQueryParam}}{{#isPathParam}}path{{/isPathParam}}{{#isHeaderParam}}header{{/isHeaderParam}}{{#isBodyParam}}body{{/isBodyParam}}) {{description}} {{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{/allParams}}

     - returns: Resource<{{#bodyParam}}{{dataType}}{{/bodyParam}}{{^bodyParam}}Networking.Empty{{/bodyParam}},{{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}Networking.Empty{{/returnType}}> {{description}}
     */
    open class func {{operationId}}Resource({{#allParams}}{{paramName}}: {{#isEnum}}{{#isContainer}}{{{dataType}}}{{/isContainer}}{{^isContainer}}{{{datatypeWithEnum}}}_{{operationId}}{{/isContainer}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}{{^required}}? = nil{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) -> Resource<{{#bodyParam}}{{dataType}}{{/bodyParam}}{{^bodyParam}}Networking.Empty{{/bodyParam}},{{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}Networking.Empty{{/returnType}}> {
        {{^pathParams}}let{{/pathParams}}{{#pathParams}}{{^secondaryParam}}var{{/secondaryParam}}{{/pathParams}} path = "{{{path}}}"{{#pathParams}}
        let {{paramName}}PreEscape = "\({{paramName}}{{#isEnum}}{{#isContainer}}{{{dataType}}}{{/isContainer}}{{^isContainer}}.rawValue{{/isContainer}}{{/isEnum}})"
        let {{paramName}}PostEscape = {{paramName}}PreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{{=<% %>=}}{<%baseName%>}<%={{ }}=%>", with: {{paramName}}PostEscape, options: .literal, range: nil){{/pathParams}}
        
        return Resource(endpoint: path, 
                queryParameters: {{#hasQueryParams}}
        APIHelper.mapValuesToQueryItems([
            {{#queryParams}}
            {{> _param}}{{#hasMore}}, {{/hasMore}}
            {{/queryParams}} 
        ]){{/hasQueryParams}}{{^hasQueryParams}}[]{{/hasQueryParams}},
                method: HTTP.Method(string: "{{httpMethod}}"), 
                body: {{#bodyParam}}HTTP.Body(data: body, contentType: JSONContentType()){{/bodyParam}}{{^bodyParam}}nil{{/bodyParam}},
                decoder: JSONDecoder()) 
          
    }

{{/operation}}
}
{{/operations}}
